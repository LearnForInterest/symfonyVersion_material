<?php

namespace Material\WebBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MaterialRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MaterialRepository extends EntityRepository
{
    /**
     * 使用库存中的材料
     * @return integer
     */
    public function minusMaterialInStock($argv)
    {
        $chkResult = self::chkNumInStock($argv);
        if(!$chkResult){
            return -1;
        }
        $this->_em->createQueryBuilder()
            ->update('Material\WebBundle\Entity\Material', 'm')
            ->set('m.number','m.number-1')
            ->where('m.id IN(:needIDs)')
            ->setParameter( 'needIDs', array_values($argv) )
            ->getQuery()
            ->execute();
        return 1;
    }

    /**
     * 查询库存量
     * @return boolean
     */
    private function chkNumInStock($argv)
    {
        foreach ($argv as $v){
            $numInStock = $this->_em->createQueryBuilder()
                ->select("m.number")
                ->from('Material\WebBundle\Entity\Material','m')
                ->where('m.id = :id')
                ->setParameter( 'id', $v )
                ->getQuery()->getSingleScalarResult();
            if($numInStock == 0) return false;
        }
        return true;
    }


    /**
     * getTotalPrice
     * @return integer
     */
    public function getTotalPrice($argv)
    {
        return $totalPrice = $this->_em->createQueryBuilder()
            ->select("sum(m.price)")
            ->from('Material\WebBundle\Entity\Material','m')
            ->where('m.id IN(:needIDs)')
            ->setParameter( 'needIDs', array_values($argv) )
            ->getQuery()->getSingleScalarResult();
    }
}
